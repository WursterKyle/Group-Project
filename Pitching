# Act like an expert in Python programming, baseball analytics, and statistics. Also act like an expert in solving business problems in the sports and entertainment industry. You are in the operations of a major league baseball team. You have been presented with a problem by the owners of your major league baseball team on how players' performances change as they age, and what age range typically represents peak performance in various statistical categories. We will use Python to create programs to use baseball data and create it into significant statistical analysis.  Please provide verbose comments so we can understand what is occurring at each line of code. We use Visual Studio Code for writing and executing Python. Make sure the code runs correctly.  You are a master in clean, maintainable, readable, and scalable code. Create a python program that reads in the spreadsheet "Path:C:\Users\KintzlerKH15\Downloads\lahman_1871-2023_csv (3).7z". The program should begin with searching in the spreadsheet and extracting every player with an MLB debut date from the year 1974 until current day 2024.  Each player is given a "playerID" given in column B.  Debut date is found in in column T, named "debut".  Make sure the dates are made into date format.  Using the selected players, now read in the spreadsheet "Path: C:\Users\KintzlerKH15\Downloads\lahman_1871-2023_csv (3).7z".   This spreadsheet provides the "playerID" and their pitching statistics from every year of their career.  With the selected players based on debut date, take each player and print out their age at every year of their career.  Age will be determined by year of play shown in the "Pitching.xlsx" spreadsheet in column B labeled "yearID" subtracted by birth date shown in the "People.xlsx" spreadsheet in column C "birthYear".  The program should then find each players "ERA" in column T from the "Pitching.xlsx" spreadhseet.  The program should then print out the playerID, yearID, Age, and “Era” along with “WP” column V.  Use pandas dataframe to format the data in the terminal.  Filter out any players who have no pitching statistics.  Remove them from the data.

can you change the "WP" to find the "WIP"

# 1. Performance Trends and Player Development
# Research Question: How do players' performances change as they age, and what age range typically represents peak performance in various statistical categories (e.g., batting average, home runs, ERA)?
  # Data Tables to Use: People, Batting, Pitching
  # Analysis Approach: You can use player birth dates to calculate age for each season played. Then, aggregate performance stats by age and analyze trends to identify peak performance periods.

# For Batters: Use statistics such as Batting Average (BA), On-Base Plus Slugging (OPS), Home Runs (HR)
# For Pitchers: Use statistics such as Earned Run Average (ERA), Walks Plus Hits Per Innning (WHIP), Opponent Batting Percentage (BAOpp)
# May want to seperate Batters and Pitchers for Analysis
# Use "Batting" and "Pitching" spreadhseets for statistics
  # Equations for Batting Statistics:
    # BA = (H) / (AB)
    # OPS = (OBP) + (SLG)
      # OBP = (H + BB + HBP) / (AB + BB + HBP + SF)
      # SLG = (1B + 2B*2 + 3B*3 + HR*4) / (AB)
  # Equations for Pitching Statistics:
    # WHIP = (H + BB) / (IP)
      # IP = (IPouts) / (3)

_________________________________________________________________________________________________________________________________________________________________________________________________________________________________

import pandas as pd


# Read People.csv to extract player debut dates
people_df = pd.read_csv('C:/Users/KintzlerKH15/Downloads/People.csv', encoding='latin1')


# Convert 'debut' column to datetime format
people_df['debut'] = pd.to_datetime(people_df['debut'])


# Filter players with MLB debut date from 1974 to 2024
selected_players = people_df[(people_df['debut'] >= '1974-01-01') & (people_df['debut'] <= '2024-12-31')]


# Extract player IDs for selected players
selected_player_ids = selected_players['playerID'].tolist()


# Read Pitching.csv to get pitching statistics for selected players
pitching_df = pd.read_csv('C:/Users/KintzlerKH15/Downloads/Pitching.csv', encoding='latin1')


# Filter pitching data for selected players
selected_pitching = pitching_df[pitching_df['playerID'].isin(selected_player_ids)]


# Merge selected pitching data with player birth years
selected_pitching = pd.merge(selected_pitching, selected_players[['playerID', 'birthYear']], on='playerID')


# Convert yearID and birthYear columns to datetime format
selected_pitching['yearID'] = pd.to_datetime(selected_pitching['yearID'], format='%Y')
selected_pitching['birthYear'] = pd.to_datetime(selected_pitching['birthYear'], format='%Y')


# Calculate age at each year of career
selected_pitching['age'] = selected_pitching['yearID'].dt.year - selected_pitching['birthYear'].dt.year


# Calculate WHIP (Walks plus Hits per Inning Pitched)
selected_pitching['IP'] = selected_pitching['IPouts'] / 3
selected_pitching['WHIP'] = (selected_pitching['BB'] + selected_pitching['H']) / selected_pitching['IP']


# Filter out players with no pitching statistics
selected_pitching = selected_pitching.dropna(subset=['ERA'])


# Print playerID, yearID, age, ERA, and WHIP
print(selected_pitching[['playerID', 'yearID', 'age', 'ERA', 'WHIP']])




# May want to use this:

# Filter out pitchers who pitched more than 50 innings in a season
selected_pitching = selected_pitching[selected_pitching['IP'] > 50]
